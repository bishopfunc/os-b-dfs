// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DFSClient is the client API for DFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DFSClient interface {
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error)
	CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*CloseFileResponse, error)
	UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...grpc.CallOption) (*UpdateCacheResponse, error)
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error)
	UpdateLock(ctx context.Context, in *UpdateLockRequest, opts ...grpc.CallOption) (*UpdateLockResponse, error)
	CheckLock(ctx context.Context, in *CheckLockRequest, opts ...grpc.CallOption) (*CheckLockResponse, error)
	NotifyInvalid(ctx context.Context, opts ...grpc.CallOption) (DFS_NotifyInvalidClient, error)
}

type dFSClient struct {
	cc grpc.ClientConnInterface
}

func NewDFSClient(cc grpc.ClientConnInterface) DFSClient {
	return &dFSClient{cc}
}

func (c *dFSClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error) {
	out := new(OpenFileResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/OpenFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*CloseFileResponse, error) {
	out := new(CloseFileResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/CloseFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...grpc.CallOption) (*UpdateCacheResponse, error) {
	out := new(UpdateCacheResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/UpdateCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error) {
	out := new(DeleteCacheResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/DeleteCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) UpdateLock(ctx context.Context, in *UpdateLockRequest, opts ...grpc.CallOption) (*UpdateLockResponse, error) {
	out := new(UpdateLockResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/UpdateLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) CheckLock(ctx context.Context, in *CheckLockRequest, opts ...grpc.CallOption) (*CheckLockResponse, error) {
	out := new(CheckLockResponse)
	err := c.cc.Invoke(ctx, "/dfs.DFS/CheckLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dFSClient) NotifyInvalid(ctx context.Context, opts ...grpc.CallOption) (DFS_NotifyInvalidClient, error) {
	stream, err := c.cc.NewStream(ctx, &DFS_ServiceDesc.Streams[0], "/dfs.DFS/NotifyInvalid", opts...)
	if err != nil {
		return nil, err
	}
	x := &dFSNotifyInvalidClient{stream}
	return x, nil
}

type DFS_NotifyInvalidClient interface {
	Send(*NotifyInvalidRequest) error
	Recv() (*NotifyInvalidResponse, error)
	grpc.ClientStream
}

type dFSNotifyInvalidClient struct {
	grpc.ClientStream
}

func (x *dFSNotifyInvalidClient) Send(m *NotifyInvalidRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dFSNotifyInvalidClient) Recv() (*NotifyInvalidResponse, error) {
	m := new(NotifyInvalidResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DFSServer is the server API for DFS service.
// All implementations must embed UnimplementedDFSServer
// for forward compatibility
type DFSServer interface {
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error)
	CloseFile(context.Context, *CloseFileRequest) (*CloseFileResponse, error)
	UpdateCache(context.Context, *UpdateCacheRequest) (*UpdateCacheResponse, error)
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error)
	UpdateLock(context.Context, *UpdateLockRequest) (*UpdateLockResponse, error)
	CheckLock(context.Context, *CheckLockRequest) (*CheckLockResponse, error)
	NotifyInvalid(DFS_NotifyInvalidServer) error
	mustEmbedUnimplementedDFSServer()
}

// UnimplementedDFSServer must be embedded to have forward compatible implementations.
type UnimplementedDFSServer struct {
}

func (UnimplementedDFSServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedDFSServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedDFSServer) OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedDFSServer) CloseFile(context.Context, *CloseFileRequest) (*CloseFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFile not implemented")
}
func (UnimplementedDFSServer) UpdateCache(context.Context, *UpdateCacheRequest) (*UpdateCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCache not implemented")
}
func (UnimplementedDFSServer) DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedDFSServer) UpdateLock(context.Context, *UpdateLockRequest) (*UpdateLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLock not implemented")
}
func (UnimplementedDFSServer) CheckLock(context.Context, *CheckLockRequest) (*CheckLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLock not implemented")
}
func (UnimplementedDFSServer) NotifyInvalid(DFS_NotifyInvalidServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyInvalid not implemented")
}
func (UnimplementedDFSServer) mustEmbedUnimplementedDFSServer() {}

// UnsafeDFSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DFSServer will
// result in compilation errors.
type UnsafeDFSServer interface {
	mustEmbedUnimplementedDFSServer()
}

func RegisterDFSServer(s grpc.ServiceRegistrar, srv DFSServer) {
	s.RegisterService(&DFS_ServiceDesc, srv)
}

func _DFS_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/OpenFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).OpenFile(ctx, req.(*OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_CloseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).CloseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/CloseFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).CloseFile(ctx, req.(*CloseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_UpdateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).UpdateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/UpdateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).UpdateCache(ctx, req.(*UpdateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/DeleteCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_UpdateLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).UpdateLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/UpdateLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).UpdateLock(ctx, req.(*UpdateLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_CheckLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DFSServer).CheckLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DFS/CheckLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DFSServer).CheckLock(ctx, req.(*CheckLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DFS_NotifyInvalid_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DFSServer).NotifyInvalid(&dFSNotifyInvalidServer{stream})
}

type DFS_NotifyInvalidServer interface {
	Send(*NotifyInvalidResponse) error
	Recv() (*NotifyInvalidRequest, error)
	grpc.ServerStream
}

type dFSNotifyInvalidServer struct {
	grpc.ServerStream
}

func (x *dFSNotifyInvalidServer) Send(m *NotifyInvalidResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dFSNotifyInvalidServer) Recv() (*NotifyInvalidRequest, error) {
	m := new(NotifyInvalidRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DFS_ServiceDesc is the grpc.ServiceDesc for DFS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DFS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.DFS",
	HandlerType: (*DFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFile",
			Handler:    _DFS_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _DFS_WriteFile_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _DFS_OpenFile_Handler,
		},
		{
			MethodName: "CloseFile",
			Handler:    _DFS_CloseFile_Handler,
		},
		{
			MethodName: "UpdateCache",
			Handler:    _DFS_UpdateCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _DFS_DeleteCache_Handler,
		},
		{
			MethodName: "UpdateLock",
			Handler:    _DFS_UpdateLock_Handler,
		},
		{
			MethodName: "CheckLock",
			Handler:    _DFS_CheckLock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyInvalid",
			Handler:       _DFS_NotifyInvalid_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dfs.proto",
}
